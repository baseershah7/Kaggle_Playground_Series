{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4b5f2623",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:06.687994Z",
     "iopub.status.busy": "2025-07-23T18:38:06.687669Z",
     "iopub.status.idle": "2025-07-23T18:38:07.471792Z",
     "shell.execute_reply": "2025-07-23T18:38:07.470988Z"
    },
    "papermill": {
     "duration": 0.791362,
     "end_time": "2025-07-23T18:38:07.473898",
     "exception": false,
     "start_time": "2025-07-23T18:38:06.682536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e5/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e5/train.csv\n",
      "/kaggle/input/playground-series-s4e5/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5e3ffac7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:07.482831Z",
     "iopub.status.busy": "2025-07-23T18:38:07.481977Z",
     "iopub.status.idle": "2025-07-23T18:38:10.358190Z",
     "shell.execute_reply": "2025-07-23T18:38:10.357267Z"
    },
    "papermill": {
     "duration": 2.882598,
     "end_time": "2025-07-23T18:38:10.360268",
     "exception": false,
     "start_time": "2025-07-23T18:38:07.477670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"/kaggle/input/playground-series-s4e5/train.csv\")\n",
    "test = pd.read_csv(\"/kaggle/input/playground-series-s4e5/test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fa1821da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:10.369895Z",
     "iopub.status.busy": "2025-07-23T18:38:10.369121Z",
     "iopub.status.idle": "2025-07-23T18:38:10.446051Z",
     "shell.execute_reply": "2025-07-23T18:38:10.445152Z"
    },
    "papermill": {
     "duration": 0.083898,
     "end_time": "2025-07-23T18:38:10.448237",
     "exception": false,
     "start_time": "2025-07-23T18:38:10.364339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = train.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fea0a237",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:10.457342Z",
     "iopub.status.busy": "2025-07-23T18:38:10.456683Z",
     "iopub.status.idle": "2025-07-23T18:38:10.817004Z",
     "shell.execute_reply": "2025-07-23T18:38:10.816121Z"
    },
    "papermill": {
     "duration": 0.366695,
     "end_time": "2025-07-23T18:38:10.818788",
     "exception": false,
     "start_time": "2025-07-23T18:38:10.452093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MonsoonIntensity</th>\n",
       "      <th>TopographyDrainage</th>\n",
       "      <th>RiverManagement</th>\n",
       "      <th>Deforestation</th>\n",
       "      <th>Urbanization</th>\n",
       "      <th>ClimateChange</th>\n",
       "      <th>DamsQuality</th>\n",
       "      <th>Siltation</th>\n",
       "      <th>AgriculturalPractices</th>\n",
       "      <th>Encroachments</th>\n",
       "      <th>...</th>\n",
       "      <th>DrainageSystems</th>\n",
       "      <th>CoastalVulnerability</th>\n",
       "      <th>Landslides</th>\n",
       "      <th>Watersheds</th>\n",
       "      <th>DeterioratingInfrastructure</th>\n",
       "      <th>PopulationScore</th>\n",
       "      <th>WetlandLoss</th>\n",
       "      <th>InadequatePlanning</th>\n",
       "      <th>PoliticalFactors</th>\n",
       "      <th>FloodProbability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>0.445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>0.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0.415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117952</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0.495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117953</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0.480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117954</th>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0.485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117955</th>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0.495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117956</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>0.560</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1117957 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         MonsoonIntensity  TopographyDrainage  RiverManagement  Deforestation  \\\n",
       "0                       5                   8                5              8   \n",
       "1                       6                   7                4              4   \n",
       "2                       6                   5                6              7   \n",
       "3                       3                   4                6              5   \n",
       "4                       5                   3                2              6   \n",
       "...                   ...                 ...              ...            ...   \n",
       "1117952                 3                   3                4             10   \n",
       "1117953                 2                   2                4              3   \n",
       "1117954                 7                   3                9              4   \n",
       "1117955                 7                   3                3              7   \n",
       "1117956                 4                   5                6              9   \n",
       "\n",
       "         Urbanization  ClimateChange  DamsQuality  Siltation  \\\n",
       "0                   6              4            4          3   \n",
       "1                   8              8            3          5   \n",
       "2                   3              7            1          5   \n",
       "3                   4              8            4          7   \n",
       "4                   4              4            3          3   \n",
       "...               ...            ...          ...        ...   \n",
       "1117952             4              5            5          7   \n",
       "1117953             9              5            8          1   \n",
       "1117954             6              5            9          1   \n",
       "1117955             5              2            3          4   \n",
       "1117956             5              5            2          8   \n",
       "\n",
       "         AgriculturalPractices  Encroachments  ...  DrainageSystems  \\\n",
       "0                            3              4  ...                5   \n",
       "1                            4              6  ...                7   \n",
       "2                            4              5  ...                7   \n",
       "3                            6              8  ...                2   \n",
       "4                            3              3  ...                2   \n",
       "...                        ...            ...  ...              ...   \n",
       "1117952                     10              4  ...                7   \n",
       "1117953                      3              5  ...                9   \n",
       "1117954                      3              4  ...                5   \n",
       "1117955                      6              4  ...                6   \n",
       "1117956                      4              5  ...                4   \n",
       "\n",
       "         CoastalVulnerability  Landslides  Watersheds  \\\n",
       "0                           3           3           5   \n",
       "1                           2           0           3   \n",
       "2                           3           7           5   \n",
       "3                           4           7           4   \n",
       "4                           2           6           6   \n",
       "...                       ...         ...         ...   \n",
       "1117952                     8           7           2   \n",
       "1117953                     4           4           3   \n",
       "1117954                     5           5           5   \n",
       "1117955                     8           5           3   \n",
       "1117956                     8           6           5   \n",
       "\n",
       "         DeterioratingInfrastructure  PopulationScore  WetlandLoss  \\\n",
       "0                                  4                7            5   \n",
       "1                                  5                3            3   \n",
       "2                                  6                8            2   \n",
       "3                                  4                6            5   \n",
       "4                                  4                1            2   \n",
       "...                              ...              ...          ...   \n",
       "1117952                            2                1            4   \n",
       "1117953                            7                4            9   \n",
       "1117954                            6                5            5   \n",
       "1117955                            4                6            7   \n",
       "1117956                            5                6            7   \n",
       "\n",
       "         InadequatePlanning  PoliticalFactors  FloodProbability  \n",
       "0                         7                 3             0.445  \n",
       "1                         4                 3             0.450  \n",
       "2                         3                 3             0.530  \n",
       "3                         7                 5             0.535  \n",
       "4                         3                 5             0.415  \n",
       "...                     ...               ...               ...  \n",
       "1117952                   6                 4             0.495  \n",
       "1117953                   4                 5             0.480  \n",
       "1117954                   2                 4             0.485  \n",
       "1117955                   6                 4             0.495  \n",
       "1117956                   7                 8             0.560  \n",
       "\n",
       "[1117957 rows x 21 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.drop('id',axis=1,inplace=True)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "05887724",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:10.827619Z",
     "iopub.status.busy": "2025-07-23T18:38:10.827386Z",
     "iopub.status.idle": "2025-07-23T18:38:10.834009Z",
     "shell.execute_reply": "2025-07-23T18:38:10.833198Z"
    },
    "papermill": {
     "duration": 0.012907,
     "end_time": "2025-07-23T18:38:10.835633",
     "exception": false,
     "start_time": "2025-07-23T18:38:10.822726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          0.445\n",
       "1          0.450\n",
       "2          0.530\n",
       "3          0.535\n",
       "4          0.415\n",
       "           ...  \n",
       "1117952    0.495\n",
       "1117953    0.480\n",
       "1117954    0.485\n",
       "1117955    0.495\n",
       "1117956    0.560\n",
       "Name: FloodProbability, Length: 1117957, dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = X.pop('FloodProbability')\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "212dfbbb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:10.844857Z",
     "iopub.status.busy": "2025-07-23T18:38:10.844428Z",
     "iopub.status.idle": "2025-07-23T18:38:12.183341Z",
     "shell.execute_reply": "2025-07-23T18:38:12.182604Z"
    },
    "papermill": {
     "duration": 1.345556,
     "end_time": "2025-07-23T18:38:12.185386",
     "exception": false,
     "start_time": "2025-07-23T18:38:10.839830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train,X_valid,y_train,y_valid = train_test_split(X,y,test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60e15f65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:12.195003Z",
     "iopub.status.busy": "2025-07-23T18:38:12.194530Z",
     "iopub.status.idle": "2025-07-23T18:38:12.199410Z",
     "shell.execute_reply": "2025-07-23T18:38:12.198643Z"
    },
    "papermill": {
     "duration": 0.011192,
     "end_time": "2025-07-23T18:38:12.201031",
     "exception": false,
     "start_time": "2025-07-23T18:38:12.189839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(894365, 20)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dd7c7d3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:12.210341Z",
     "iopub.status.busy": "2025-07-23T18:38:12.209781Z",
     "iopub.status.idle": "2025-07-23T18:38:12.214488Z",
     "shell.execute_reply": "2025-07-23T18:38:12.213750Z"
    },
    "papermill": {
     "duration": 0.011185,
     "end_time": "2025-07-23T18:38:12.216162",
     "exception": false,
     "start_time": "2025-07-23T18:38:12.204977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(223592, 20)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_valid.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9137a650",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:12.225860Z",
     "iopub.status.busy": "2025-07-23T18:38:12.225162Z",
     "iopub.status.idle": "2025-07-23T18:38:24.736876Z",
     "shell.execute_reply": "2025-07-23T18:38:24.735953Z"
    },
    "papermill": {
     "duration": 12.518657,
     "end_time": "2025-07-23T18:38:24.739000",
     "exception": false,
     "start_time": "2025-07-23T18:38:12.220343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-23 18:38:14.242335: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2025-07-23 18:38:14.242466: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2025-07-23 18:38:14.393080: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:86: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "model = tf.keras.Sequential([\n",
    "    layers.Dense(512,activation='relu',input_shape=[20]),\n",
    "    layers.Dense(256,activation='relu'),\n",
    "    layers.Dense(128,activation='relu'),\n",
    "    layers.Dense(64,activation='relu'),\n",
    "    layers.Dense(32,activation='relu'),\n",
    "\n",
    "    layers.Dense(1,activation='sigmoid'),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "55248462",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:24.749047Z",
     "iopub.status.busy": "2025-07-23T18:38:24.748592Z",
     "iopub.status.idle": "2025-07-23T18:38:24.764293Z",
     "shell.execute_reply": "2025-07-23T18:38:24.763646Z"
    },
    "papermill": {
     "duration": 0.022319,
     "end_time": "2025-07-23T18:38:24.765935",
     "exception": false,
     "start_time": "2025-07-23T18:38:24.743616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from keras.optimizers import Adam\n",
    "from keras.optimizers import SGD\n",
    "optimizer = Adam(learning_rate=0.1)\n",
    "model.compile(\n",
    "    optimizer='SGD',\n",
    "    loss='mae',\n",
    "    metrics=['r2_score'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "57b7fed8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:24.776509Z",
     "iopub.status.busy": "2025-07-23T18:38:24.775853Z",
     "iopub.status.idle": "2025-07-23T18:38:24.779761Z",
     "shell.execute_reply": "2025-07-23T18:38:24.779050Z"
    },
    "papermill": {
     "duration": 0.01115,
     "end_time": "2025-07-23T18:38:24.781334",
     "exception": false,
     "start_time": "2025-07-23T18:38:24.770184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from keras.callbacks import EarlyStopping\n",
    "early_stopping = EarlyStopping(monitor='val_loss',patience=5,min_delta=0.001,mode='min',restore_best_weights=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c0b51b58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:38:24.790847Z",
     "iopub.status.busy": "2025-07-23T18:38:24.790406Z",
     "iopub.status.idle": "2025-07-23T18:40:35.992637Z",
     "shell.execute_reply": "2025-07-23T18:40:35.991683Z"
    },
    "papermill": {
     "duration": 131.209072,
     "end_time": "2025-07-23T18:40:35.994604",
     "exception": false,
     "start_time": "2025-07-23T18:38:24.785532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m 103/6988\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m10s\u001b[0m 1ms/step - loss: 0.0461 - r2_score: -0.3135"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753295907.115319      67 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n",
      "W0000 00:00:1753295907.126770      67 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 2ms/step - loss: 0.0324 - r2_score: 0.3514 - val_loss: 0.0202 - val_r2_score: 0.7726\n",
      "Epoch 2/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0203 - r2_score: 0.7544 - val_loss: 0.0181 - val_r2_score: 0.8161\n",
      "Epoch 3/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0188 - r2_score: 0.7827 - val_loss: 0.0265 - val_r2_score: 0.6527\n",
      "Epoch 4/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0180 - r2_score: 0.7947 - val_loss: 0.0216 - val_r2_score: 0.7014\n",
      "Epoch 5/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0174 - r2_score: 0.8063 - val_loss: 0.0171 - val_r2_score: 0.8312\n",
      "Epoch 6/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0169 - r2_score: 0.8131 - val_loss: 0.0155 - val_r2_score: 0.8323\n",
      "Epoch 7/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0167 - r2_score: 0.8171 - val_loss: 0.0173 - val_r2_score: 0.7799\n",
      "Epoch 8/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0166 - r2_score: 0.8189 - val_loss: 0.0175 - val_r2_score: 0.8255\n",
      "Epoch 9/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0163 - r2_score: 0.8236 - val_loss: 0.0156 - val_r2_score: 0.8439\n",
      "Epoch 10/10\n",
      "\u001b[1m6988/6988\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2ms/step - loss: 0.0163 - r2_score: 0.8227 - val_loss: 0.0172 - val_r2_score: 0.8301\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    X_train,y_train,\n",
    "    epochs=10,\n",
    "    batch_size=128,\n",
    "    validation_data=(X_valid,y_valid,),)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3a5a41a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:40:36.238653Z",
     "iopub.status.busy": "2025-07-23T18:40:36.238328Z",
     "iopub.status.idle": "2025-07-23T18:40:36.754832Z",
     "shell.execute_reply": "2025-07-23T18:40:36.754047Z"
    },
    "papermill": {
     "duration": 0.616046,
     "end_time": "2025-07-23T18:40:36.756670",
     "exception": false,
     "start_time": "2025-07-23T18:40:36.140624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'r2_score'}>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[:,['loss','val_loss']].plot(title='MAE')\n",
    "history_df.loc[:,['r2_score','val_r2_score']].plot(title='r2_score')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "09b5877c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:40:36.957176Z",
     "iopub.status.busy": "2025-07-23T18:40:36.956594Z",
     "iopub.status.idle": "2025-07-23T18:40:36.960960Z",
     "shell.execute_reply": "2025-07-23T18:40:36.960102Z"
    },
    "papermill": {
     "duration": 0.10512,
     "end_time": "2025-07-23T18:40:36.962590",
     "exception": false,
     "start_time": "2025-07-23T18:40:36.857470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "idx = test['id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a97ccaf1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:40:37.163128Z",
     "iopub.status.busy": "2025-07-23T18:40:37.162464Z",
     "iopub.status.idle": "2025-07-23T18:40:37.205758Z",
     "shell.execute_reply": "2025-07-23T18:40:37.204773Z"
    },
    "papermill": {
     "duration": 0.143559,
     "end_time": "2025-07-23T18:40:37.207869",
     "exception": false,
     "start_time": "2025-07-23T18:40:37.064310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test.drop('id',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "420253d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:40:37.408054Z",
     "iopub.status.busy": "2025-07-23T18:40:37.407467Z",
     "iopub.status.idle": "2025-07-23T18:41:18.558739Z",
     "shell.execute_reply": "2025-07-23T18:41:18.557778Z"
    },
    "papermill": {
     "duration": 41.25504,
     "end_time": "2025-07-23T18:41:18.560932",
     "exception": false,
     "start_time": "2025-07-23T18:40:37.305892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m23291/23291\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 1ms/step\n"
     ]
    }
   ],
   "source": [
    "tf_preds = model.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c77e1007",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:41:18.809512Z",
     "iopub.status.busy": "2025-07-23T18:41:18.808887Z",
     "iopub.status.idle": "2025-07-23T18:41:18.814440Z",
     "shell.execute_reply": "2025-07-23T18:41:18.813626Z"
    },
    "papermill": {
     "duration": 0.129369,
     "end_time": "2025-07-23T18:41:18.816043",
     "exception": false,
     "start_time": "2025-07-23T18:41:18.686674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(745305,)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idx.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "66530a65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:41:19.108721Z",
     "iopub.status.busy": "2025-07-23T18:41:19.108065Z",
     "iopub.status.idle": "2025-07-23T18:41:19.114431Z",
     "shell.execute_reply": "2025-07-23T18:41:19.113519Z"
    },
    "papermill": {
     "duration": 0.132042,
     "end_time": "2025-07-23T18:41:19.116025",
     "exception": false,
     "start_time": "2025-07-23T18:41:18.983983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_df = pd.DataFrame({\n",
    "    'id':idx,\n",
    "    'FloodProbability':tf_preds.ravel()\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "79fb7466",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-23T18:41:19.365031Z",
     "iopub.status.busy": "2025-07-23T18:41:19.364702Z",
     "iopub.status.idle": "2025-07-23T18:41:20.285958Z",
     "shell.execute_reply": "2025-07-23T18:41:20.285245Z"
    },
    "papermill": {
     "duration": 1.048719,
     "end_time": "2025-07-23T18:41:20.287858",
     "exception": false,
     "start_time": "2025-07-23T18:41:19.239139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_df.to_csv('submission.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f870598e",
   "metadata": {
    "papermill": {
     "duration": 0.120748,
     "end_time": "2025-07-23T18:41:20.532380",
     "exception": false,
     "start_time": "2025-07-23T18:41:20.411632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8121328,
     "sourceId": 73278,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30699,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 199.22975,
   "end_time": "2025-07-23T18:41:23.386888",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-23T18:38:04.157138",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
